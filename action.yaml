name: "debian-repo"
description: |
  Create a Debian package repository on GitHub Pages, from packages published in
  GitHub Releases. Please run this action on Linux, preferably on `ubuntu-latest`.
author: "Gábor Csárdi"

inputs:
  source-repo:
    description: |
      SLug of the repository to look up DEB packages in Github Releases in.
      Defaults to the current repository.
    required: false
    default: ${{ github.repository }}
  target-repo:
    description: |
      Slug of the repository to deploy to. Defaults to the current repository.
    required: false
    default: ${{ github.repository }}
  token:
    description: |
      GitHub token to use to authenticate to GitHub.
    required: false
    default: ${{ github.token }}
  debian-repo-name:
    description: |
      The name of the Debian repository. By default the name of the current
      repository.
    required: false
  gpg-public-key:
    description: |
      Public key to add to the repository.
    required: false
  gpg-private-key:
    description: |
      Private key to sign the repository.
    reqiured: true
  gpg-passphrase:
    description: |
      Pass phrase for the private key.
    required: true

runs:
  using: "composite"
  steps:
  - name: Install dependencies
    run: |
      sudo apt-get update && sudo apt-get -y install git dpkg-dev gpg
    shell: bash

  - name: Log in to GitHub
    run: |
      echo ${{ inputs.token }} | gh auth login --with-token
    shell: bash

  - name: Download release
    run: |
      set -e
      urls=$(gh api repos/r-lib/rig/releases/latest |
             jq -r '.assets[].browser_download_url' |
             grep '\.deb$')
      if [[ -z "$urls" ]]; then
        echo "No .deb files to publish"
        exit 1
      fi
      cd /tmp
      rm -rf repo
      mkdir -p repo/deb/pool/main
      cd repo/deb/pool/main
      for url in `echo $urls`; do
        echo "Downloading $url"
        curl -LO "$url"
      done
    shell: bash

  - name: Create Debian repository
    run: |
      set -e
      cd /tmp/repo/deb
      export REPO_NAME="${{ inputs.debian-repo-name }}"
      if [[ -z "$repo_name" ]]; then
        export REPO_NAME="`echo ${{ github.repository }} | cut -f2 -d/`"
      fi
      mkdir -p dists/${REPO_NAME}/main
      mkdir -p dists/${REPO_NAME}/main/binary-amd64
      mkdir -p dists/${REPO_NAME}/main/binary-arm64
      mkdir -p dists/${REPO_NAME}/main/binary-i386
      dpkg-scanpackages --arch amd64 pool/ > dists/${REPO_NAME}/main/binary-amd64/Packages
      dpkg-scanpackages --arch arm64 pool/ > dists/${REPO_NAME}/main/binary-arm64/Packages
      dpkg-scanpackages --arch i386 pool/ > dists/${REPO_NAME}/main/binary-i386/Packages
      gzip -kf dists/${REPO_NAME}/main/binary-amd64/Packages
      gzip -kf dists/${REPO_NAME}/main/binary-arm64/Packages
      gzip -kf dists/${REPO_NAME}/main/binary-i386/Packages
      export DEB_ORIGIN=https://github.com/${{ inputs.source-repo }}
      export DEB_LABEL="$DEB_ORIGIN"
      export DEB_DESCRIPTION="Packages from ${DEB_ORIGIN}."
      cd dists/${REPO_NAME} && ${{ github.action_path }}/generate-release.sh > Release
    shell: bash

  - name: "Add public key to the repository"
    run: |
      set -e
      echo "${{ inputs.gpg-public-key }}" > /tmp/repo/deb/rig.asc
      cat /tmp/repo/deb/rig.asc | gpg --dearmor -o /tmp/repo/deb/rig.gpg
    shell: bash

  - name: "Import private key"
    uses: crazy-max/ghaction-import-gpg@v5
    with:
      gpg_private_key: ${{ inputs.gpg-private-key }}
      passphrase: ${{ inputs.gpg-passphrase }}

  - name: "Sign repository"
    run: |
      set -e
      cd /tmp/repo/deb
      export REPO_NAME="${{ inputs.debian-repo-name }}"
      if [[ -z "$repo_name" ]]; then
        export REPO_NAME="`echo ${{ github.repository }} | cut -f2 -d/`"
      fi
      cat dists/${REPO_NAME}/Release |
        gpg --default-key csardi.gabor@gmail.com -abs \
        > dists/${REPO_NAME}/Release.gpg
      cat dists/${REPO_NAME}/Release |
        gpg --default-key csardi.gabor@gmail.com -abs --clearsign \
        > dists/${REPO_NAME}/InRelease
    shell: bash

  - name: Deploy to GitHub Pages
    uses: JamesIves/github-pages-deploy-action@v4.4.1
    with:
      clean: true
      branch: gh-pages
      folder: /tmp/repo
      token: ${{ inputs.token }}
      single-commit: true
      repository-name: ${{ inputs.target-repo }}
